// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  name               String?
  email              String             @unique
  password           String
  image              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  transactions       Transaction[]
  accounts           Account[]
  sessions           Session[]
  AccountBalance     AccountBalance[]
  BankAccount        BankAccount[]
  sentInvitations    Invitation[]       @relation("Sender")
  receivedInvitations Invitation[]       @relation("Recipient")
  sharedTransactions SharedTransaction[] @relation("SharedWith")
  sharedByMe         SharedTransaction[] @relation("SharedBy")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String             @id @default(uuid())
  date            String
  vendor          String
  amount          Float?             @default(0.0)
  category        String
  transactionType String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWith      SharedTransaction[]

  @@index([date])
  @@index([category])
  @@index([vendor])
  @@index([transactionType])
  @@index([userId])
}

model BankAccount {
  id            String           @id @default(uuid())
  name          String
  accountType   String // Checking, Savings, Credit, etc.
  bankName      String
  accountNumber String?
  routingNumber String?
  notes         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  userId        String
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  balances      AccountBalance[]

  @@index([userId])
  @@index([accountType])
}

model AccountBalance {
  id        String      @id @default(uuid())
  accountId String
  account   BankAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  balance   Float
  timestamp DateTime    @default(now())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([timestamp])
  @@index([userId])
}

model Invitation {
  id           String   @id @default(uuid())
  email        String
  status       String   @default("pending") // pending, accepted, rejected
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  senderId     String
  sender       User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId  String?
  recipient    User?    @relation("Recipient", fields: [recipientId], references: [id], onDelete: SetNull)
  
  @@index([senderId])
  @@index([recipientId])
  @@index([status])
  @@index([email])
}

model SharedTransaction {
  id             String       @id @default(uuid())
  transactionId  String
  transaction    Transaction  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  sharedById     String
  sharedBy       User         @relation("SharedBy", fields: [sharedById], references: [id], onDelete: Cascade)
  sharedWithId   String
  sharedWith     User         @relation("SharedWith", fields: [sharedWithId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([transactionId, sharedWithId])
  @@index([sharedById])
  @@index([sharedWithId])
}
